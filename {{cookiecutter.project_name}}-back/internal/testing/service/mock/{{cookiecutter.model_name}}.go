// Code generated by MockGen. DO NOT EDIT.
// Source: ./device.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/divilo/{{cookiecutter.project_name}}-back/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// Mock{{cookiecutter.model_name}}ervice is a mock of {{cookiecutter.model_name}}ervice interface.
type Mock{{cookiecutter.model_name}}ervice struct {
	ctrl     *gomock.Controller
	recorder *Mock{{cookiecutter.model_name}}erviceMockRecorder
}

// Mock{{cookiecutter.model_name}}erviceMockRecorder is the mock recorder for Mock{{cookiecutter.model_name}}ervice.
type Mock{{cookiecutter.model_name}}erviceMockRecorder struct {
	mock *Mock{{cookiecutter.model_name}}ervice
}

// NewMock{{cookiecutter.model_name}}ervice creates a new mock instance.
func NewMock{{cookiecutter.model_name}}ervice(ctrl *gomock.Controller) *Mock{{cookiecutter.model_name}}ervice {
	mock := &Mock{{cookiecutter.model_name}}ervice{ctrl: ctrl}
	mock.recorder = &Mock{{cookiecutter.model_name}}erviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mock{{cookiecutter.model_name}}ervice) EXPECT() *Mock{{cookiecutter.model_name}}erviceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Mock{{cookiecutter.model_name}}ervice) Create(ctx context.Context, device model.Device) (model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, device)
	ret0, _ := ret[0].(model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *Mock{{cookiecutter.model_name}}erviceMockRecorder) Create(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Mock{{cookiecutter.model_name}}ervice)(nil).Create), ctx, device)
}
