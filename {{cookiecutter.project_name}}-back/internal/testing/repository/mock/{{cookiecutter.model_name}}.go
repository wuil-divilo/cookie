// Code generated by MockGen. DO NOT EDIT.
// Source: ./device.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/divilo/{{cookiecutter.project_name}}-back/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDeviceRepository is a mock of DeviceRepository interface.
type MockDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceRepositoryMockRecorder
}

// MockDeviceRepositoryMockRecorder is the mock recorder for MockDeviceRepository.
type MockDeviceRepositoryMockRecorder struct {
	mock *MockDeviceRepository
}

// NewMockDeviceRepository creates a new mock instance.
func NewMockDeviceRepository(ctrl *gomock.Controller) *MockDeviceRepository {
	mock := &MockDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceRepository) EXPECT() *MockDeviceRepositoryMockRecorder {
	return m.recorder
}

// FilterByID mocks base method.
func (m *MockDeviceRepository) FilterByID(ctx context.Context, dvcID string) (model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterByID", ctx, dvcID)
	ret0, _ := ret[0].(model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterByID indicates an expected call of FilterByID.
func (mr *MockDeviceRepositoryMockRecorder) FilterByID(ctx, dvcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterByID", reflect.TypeOf((*MockDeviceRepository)(nil).FilterByID), ctx, dvcID)
}

// Upsert mocks base method.
func (m *MockDeviceRepository) Upsert(ctx context.Context, device model.Device) (model.Device, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, device)
	ret0, _ := ret[0].(model.Device)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockDeviceRepositoryMockRecorder) Upsert(ctx, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockDeviceRepository)(nil).Upsert), ctx, device)
}
